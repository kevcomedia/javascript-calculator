{"version":3,"sources":["Display.js","CalculatorButton.js","CalculatorButtons.js","evaluateInput.js","useCalculatorInput.js","App.js","serviceWorker.js","index.js"],"names":["Display","_ref","display","react_default","a","createElement","className","CalculatorButton","color","keyTrigger","label","onActivate","size","tooltip","classes","concat","handleActivate","e","key","callback","handleKeyDown","event","preventDefault","useEffect","document","addEventListener","removeEventListener","useKeyDown","type","title","onClick","CalculatorButtons","dispatch","dispatchDigit","digit","dispatchOperator","operator","src_CalculatorButton","evaluateInput","input","postfixQueue","evalStack","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","undefined","_step2","_iterator2","Symbol","iterator","next","done","item","value","length","Error","JSON","stringify","b","pop","push","err","return","test","evaluatePostfix","operatorStack","numberQueue","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","c","createPostfixQueue","reducer","state","action","isFreshEval","String","currentInput","numberInputs","split","replace","inputDigit","lastNumberInput","Number","isNaN","inputDecimal","answer","toPrecision","console","error","message","inputEquals","useCalculatorInput","_useReducer","useReducer","_useReducer2","Object","slicedToArray","App","_useCalculatorInput","_useCalculatorInput2","src_Display","src_CalculatorButtons","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f86f3111.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Display.css';\n\nfunction Display({ display }) {\n  if (display) {\n    return <div className=\"display\">{display}</div>;\n  } else {\n    return <div className=\"display display_error\">ERROR</div>;\n  }\n}\n\nDisplay.propTypes = {\n  display: PropTypes.oneOfType([\n    PropTypes.string.isRequired,\n    PropTypes.oneOf([null]).isRequired,\n  ]),\n};\n\nexport default Display;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport './CalculatorButton.css';\n\nfunction CalculatorButton({\n  color,\n  keyTrigger,\n  label,\n  onActivate,\n  size,\n  tooltip,\n}) {\n  let classes = 'btn';\n  if (size) {\n    classes += ` btn_size_${size}`;\n  }\n  if (color) {\n    classes += ` btn_color_${color}`;\n  }\n\n  const handleActivate = (e) => {\n    onActivate();\n  };\n\n  useKeyDown(keyTrigger, handleActivate);\n\n  return (\n    <button\n      className={classes}\n      type=\"button\"\n      title={tooltip}\n      onClick={handleActivate}\n    >\n      {label}\n    </button>\n  );\n}\n\nCalculatorButton.propTypes = {\n  label: PropTypes.string.isRequired,\n  size: PropTypes.string,\n  color: PropTypes.string,\n  onActivate: PropTypes.func,\n  keyTrigger: PropTypes.string,\n  tooltip: PropTypes.string,\n};\n\nfunction useKeyDown(key, callback) {\n  const handleKeyDown = (event) => {\n    if (!key) return;\n\n    // Override browser keybind for quick search.\n    // There's nothing to search anyway.\n    if (event.key === '/') {\n      event.preventDefault();\n    }\n\n    if (event.key === key) {\n      callback();\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  });\n}\n\nexport default CalculatorButton;\n","import React from 'react';\nimport CalculatorButton from './CalculatorButton';\nimport './CalculatorButtons.css';\n\nfunction CalculatorButtons({ dispatch }) {\n  const dispatchDigit = (digit) => {\n    return () => {\n      dispatch({ type: 'digit', digit });\n    };\n  };\n\n  const dispatchOperator = (operator) => {\n    return () => {\n      dispatch({ type: 'operator', operator });\n    };\n  };\n\n  return (\n    <div className=\"buttons\">\n      <CalculatorButton\n        label=\"AC\"\n        size=\"wide\"\n        color=\"red\"\n        keyTrigger=\"Escape\"\n        tooltip=\"Esc\"\n        onActivate={() => dispatch({ type: 'clear' })}\n      />\n      <CalculatorButton\n        label=\"/\"\n        color=\"light\"\n        keyTrigger=\"/\"\n        onActivate={dispatchOperator('/')}\n      />\n      <CalculatorButton\n        label=\"*\"\n        color=\"light\"\n        keyTrigger=\"*\"\n        onActivate={dispatchOperator('*')}\n      />\n      <CalculatorButton\n        label=\"7\"\n        keyTrigger=\"7\"\n        onActivate={dispatchDigit(7)}\n      />\n      <CalculatorButton\n        label=\"8\"\n        keyTrigger=\"8\"\n        onActivate={dispatchDigit(8)}\n      />\n      <CalculatorButton\n        label=\"9\"\n        keyTrigger=\"9\"\n        onActivate={dispatchDigit(9)}\n      />\n      <CalculatorButton\n        label=\"-\"\n        color=\"light\"\n        keyTrigger=\"-\"\n        onActivate={dispatchOperator('-')}\n      />\n      <CalculatorButton\n        label=\"4\"\n        keyTrigger=\"4\"\n        onActivate={dispatchDigit(4)}\n      />\n      <CalculatorButton\n        label=\"5\"\n        keyTrigger=\"5\"\n        onActivate={dispatchDigit(5)}\n      />\n      <CalculatorButton\n        label=\"6\"\n        keyTrigger=\"6\"\n        onActivate={dispatchDigit(6)}\n      />\n      <CalculatorButton\n        label=\"+\"\n        color=\"light\"\n        keyTrigger=\"+\"\n        onActivate={dispatchOperator('+')}\n      />\n      <CalculatorButton\n        label=\"1\"\n        keyTrigger=\"1\"\n        onActivate={dispatchDigit(1)}\n      />\n      <CalculatorButton\n        label=\"2\"\n        keyTrigger=\"2\"\n        onActivate={dispatchDigit(2)}\n      />\n      <CalculatorButton\n        label=\"3\"\n        keyTrigger=\"3\"\n        onActivate={dispatchDigit(3)}\n      />\n      <CalculatorButton\n        label=\"=\"\n        size=\"tall\"\n        color=\"blue\"\n        keyTrigger=\"Enter\"\n        tooltip=\"Enter\"\n        onActivate={() => dispatch({ type: 'equals' })}\n      />\n      <CalculatorButton\n        label=\"0\"\n        size=\"wide\"\n        keyTrigger=\"0\"\n        onActivate={dispatchDigit(0)}\n      />\n      <CalculatorButton\n        label=\".\"\n        keyTrigger=\".\"\n        onActivate={() => dispatch({ type: 'decimal' })}\n      />\n    </div>\n  );\n}\n\nexport default CalculatorButtons;\n","/**\n * Converts the input string to postfix notation in array form (with each item\n * being a number or an operator). This function implements a simplified version\n * of the shunting-yard algorithm.\n */\nfunction createPostfixQueue(input) {\n  const operatorStack = [];\n  const postfixQueue = [];\n  let numberQueue = '';\n\n  for (const c of input) {\n    if (/[\\d.]/.test(c)) {\n      numberQueue += c;\n    } else if (/[-+*/]/.test(c)) {\n      postfixQueue.push(+numberQueue);\n      numberQueue = '';\n\n      if (/[*/]/.test(c)) {\n        while (\n          operatorStack.length &&\n          /[*/]/.test(operatorStack[operatorStack.length - 1])\n        ) {\n          postfixQueue.push(operatorStack.pop());\n        }\n        operatorStack.push(c);\n      } else if (/[-+]/.test(c)) {\n        while (operatorStack.length) {\n          postfixQueue.push(operatorStack.pop());\n        }\n        operatorStack.push(c);\n      }\n    } else {\n      throw new Error(`Invalid input: '${c}' full input string: '${input}'`);\n    }\n  }\n\n  if (numberQueue) {\n    postfixQueue.push(+numberQueue);\n  }\n\n  while (operatorStack.length) {\n    postfixQueue.push(operatorStack.pop());\n  }\n\n  return postfixQueue;\n}\n\nfunction evaluatePostfix(postfixQueue) {\n  const evalStack = [];\n  for (const item of postfixQueue) {\n    if (typeof item === 'number') {\n      evalStack.push(item);\n      continue;\n    }\n\n    if (evalStack.length < 2) {\n      throw new Error(JSON.stringify({ item, evalStack }));\n    }\n\n    const b = evalStack.pop();\n    const a = evalStack.pop();\n\n    if (item === '+') {\n      evalStack.push(a + b);\n    } else if (item === '-') {\n      evalStack.push(a - b);\n    } else if (item === '*') {\n      evalStack.push(a * b);\n    } else if (item === '/') {\n      if (b === 0) {\n        throw new Error(`Division by zero: ${a} / ${b}`);\n      }\n      evalStack.push(a / b);\n    } else {\n      throw new Error(`Invalid operator: '${item}'`);\n    }\n  }\n\n  if (evalStack.length !== 1) {\n    throw new Error(\n      `Malformed postfix expression. The evaluation stack should only contain a single value after evaluation. evalStack: ${JSON.stringify(\n        evalStack,\n      )} postfixQueue: ${JSON.stringify(postfixQueue)}`,\n    );\n  }\n\n  if (!/^[-+]?\\d+(\\.\\d+)?$/.test(evalStack[0])) {\n    throw new Error(`Invalid value: ${evalStack[0]}`);\n  }\n\n  return evalStack[0];\n}\n\n/**\n * Evaluates the given expression input string and returns the answer. This\n * assumes the input is well-formed.\n */\nfunction evaluateInput(input) {\n  const postfixQueue = createPostfixQueue(input);\n  const answer = evaluatePostfix(postfixQueue);\n  return answer;\n}\n\nexport default evaluateInput;\n","import { useReducer } from 'react';\nimport evaluateInput from './evaluateInput';\n\n/**\n * Appends the digit input to the current input string. If the last number (NOT\n * digit) in the input string is a `0`, it's replaced with the digit input.\n *\n * Examples:\n *   ('1+2', '3') => '1+23'\n *   ('2+10', '5') => '2+105'\n *   ('2+10', '0') => '2+100'\n *   ('5*0', '0') => '5*0'\n *   ('5*0', '3') => '5*3'\n */\nfunction inputDigit(currentInput, digit) {\n  const numberInputs = currentInput.split(/[-+*/]/);\n  const lastNumberInput = numberInputs[numberInputs.length - 1];\n\n  if (lastNumberInput === '0') {\n    if (digit === '0') {\n      // Don't change the input if the current number input is 0\n      // and the 0 button is pressed (e.g., the input string is '12*0').\n      return { input: currentInput };\n    } else {\n      // Replace the 0 at the end of the input string with the digit input.\n      return { input: currentInput.replace(/0$/, digit) };\n    }\n  }\n  // Typical case: input string doesn't end with the number '0'\n  // (NOT just the digit '0'; e.g., '2+10').\n  return { input: currentInput + digit };\n}\n\n/**\n * Appends the operator input to the current input string. If the input string.\n * ends with another operator, that operator is replaced instead.\n */\nfunction inputOperator(currentInput, operator) {\n  const isLastInputOperator = /[-+*/]$/.test(currentInput);\n  if (isLastInputOperator) {\n    return { input: currentInput.replace(/.$/, operator) };\n  }\n  return { input: currentInput + operator };\n}\n\n/**\n * Appends a `.` to the input string if possible. If the last number already has\n * a decimal point, nothing is appended.\n */\nfunction inputDecimal(currentInput) {\n  const numberInputs = currentInput.split(/[-+*/]/);\n  const lastNumberInput = numberInputs[numberInputs.length - 1];\n\n  if (lastNumberInput === '') {\n    // i.e., the input string ends with an operator\n    return { input: currentInput + '0.' };\n  }\n  if (Number.isNaN(Number(lastNumberInput + '.'))) {\n    return { input: currentInput };\n  }\n  // I'd like a more general test so I don't have to return this same object in\n  // two different places.\n  return { input: currentInput + '.' };\n}\n\n/**\n * Evaluates the current input and returns the answer, if possible. If the input\n * is malformed (e.g., ends with an operator), no evaluation happens, and the\n * same input is returned.\n */\nfunction inputEquals(currentInput) {\n  const isLastInputOperator = /[-+*/]$/.test(currentInput);\n  if (isLastInputOperator) {\n    return { input: currentInput };\n  }\n\n  try {\n    const answer = evaluateInput(currentInput);\n    // As for this mix of number-string-vice-versa coercions, it makes it so it\n    // shows at most 10 digits of precision, but truncates the trailing zeroes\n    // after the decimal point from the result of `toPrecision`.\n    return { input: `${+answer.toPrecision(10)}`, isFreshEval: true };\n  } catch (err) {\n    console.error(err.message);\n    return { input: null };\n  }\n}\n\nfunction reducer(state, action) {\n  if (state.input === null) {\n    if (action.type !== 'clear') {\n      return state;\n    } else {\n      return { input: '0', isFreshEval: false };\n    }\n  }\n\n  switch (action.type) {\n    case 'digit':\n      if (state.isFreshEval) {\n        return { input: String(action.digit), isFreshEval: false };\n      }\n      return inputDigit(state.input, action.digit);\n    case 'decimal':\n      if (state.isFreshEval) {\n        return { input: '0.', isFreshEval: false };\n      }\n      return inputDecimal(state.input);\n    case 'operator':\n      if (state.isFreshEval) {\n        return { input: state.input + action.operator, isFreshEval: false };\n      }\n      return inputOperator(state.input, action.operator);\n    case 'clear':\n      return { input: '0', isFreshEval: false };\n    case 'equals':\n      return inputEquals(state.input);\n    default:\n      throw new Error();\n  }\n}\n\nfunction useCalculatorInput() {\n  const [state, dispatch] = useReducer(reducer, {\n    // input is either an expression string,\n    // or null if an evaluation is an error.\n    input: '0',\n    isFreshEval: false,\n  });\n  return [state.input, dispatch];\n}\n\nexport default useCalculatorInput;\n","import React from 'react';\nimport Display from './Display';\nimport CalculatorButtons from './CalculatorButtons';\nimport useCalculatorInput from './useCalculatorInput';\nimport './App.css';\n\nfunction App() {\n  const [input, dispatch] = useCalculatorInput();\n\n  return (\n    <div className=\"App\">\n      <Display display={input} />\n      <CalculatorButtons dispatch={dispatch} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}